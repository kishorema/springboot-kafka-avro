import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.8.0"
}

group = 'org.poc.kafka.avro'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "https://packages.confluent.io/maven"
    }

}

dependencies {
    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //openapi
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.2'
    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    //kafka
    implementation 'org.springframework.kafka:spring-kafka:3.0.9'
    //confluent
    implementation 'io.confluent:kafka-avro-serializer:7.4.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.4.0'
    implementation 'io.confluent:kafka-streams-avro-serde:7.4.0'
    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    //Gson
    implementation 'com.google.code.gson:gson:2.10.1'
    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    stringType = "String"
    fieldVisibility = "PRIVATE"
    source 'src/main/resources/avro/schemas/'
    outputDir file('build/generated/avro')
}

sourceSets {
    getByName("main") {
        java.srcDir("$buildDir/generated/avro")
    }
}

tasks.named("compileJava").configure {
    source(generateAvro)
}

tasks.named('test') {
    useJUnitPlatform()
}
